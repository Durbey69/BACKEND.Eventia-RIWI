// <auto-generated />
using System;
using Eventia.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eventia.Infrastructure.Migrations
{
    [DbContext(typeof(EventiaDbContext))]
    partial class EventiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eventia.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioAsignadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioCreadorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAsignadoId");

                    b.HasIndex("UsuarioCreadorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.TicketEvento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioResponsableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketId1");

                    b.HasIndex("UsuarioResponsableId");

                    b.ToTable("TicketEventos");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Eventia.Domain.Entities.Usuario", "UsuarioAsignado")
                        .WithMany()
                        .HasForeignKey("UsuarioAsignadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eventia.Domain.Entities.Usuario", "UsuarioCreador")
                        .WithMany()
                        .HasForeignKey("UsuarioCreadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eventia.Domain.Entities.Usuario", null)
                        .WithMany("TicketsAsignados")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("UsuarioAsignado");

                    b.Navigation("UsuarioCreador");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.TicketEvento", b =>
                {
                    b.HasOne("Eventia.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Eventia.Domain.Entities.Ticket", null)
                        .WithMany("Eventos")
                        .HasForeignKey("TicketId1");

                    b.HasOne("Eventia.Domain.Entities.Usuario", "UsuarioResponsable")
                        .WithMany()
                        .HasForeignKey("UsuarioResponsableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("UsuarioResponsable");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Eventia.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("TicketsAsignados");
                });
#pragma warning restore 612, 618
        }
    }
}
